
OBCm--GPS--FT2017--Rohit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000564  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000007f9  00800100  00800100  00000564  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000594  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ec9  00000000  00000000  00000694  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000098e  00000000  00000000  0000155d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007a3  00000000  00000000  00001eeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  00002690  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000553  00000000  00000000  000028b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007d9  00000000  00000000  00002e0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000035e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	e4 c1       	rjmp	.+968    	; 0x412 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ef       	ldi	r30, 0xF0	; 240
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	28 e0       	ldi	r18, 0x08	; 8
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 3f       	cpi	r26, 0xF9	; 249
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	fc d1       	rcall	.+1016   	; 0x4bc <main>
  c4:	13 c2       	rjmp	.+1062   	; 0x4ec <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <get_position>:
		i=i-8;
	}
}

void get_position()
{
  c8:	ef 92       	push	r14
  ca:	ff 92       	push	r15
  cc:	0f 93       	push	r16
  ce:	1f 93       	push	r17
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	01 e1       	ldi	r16, 0x11	; 17
  d6:	11 e0       	ldi	r17, 0x01	; 1
  d8:	c5 e1       	ldi	r28, 0x15	; 21
  da:	d1 e0       	ldi	r29, 0x01	; 1
	for(int p=0;p<4;p++)
	{
		transmit_UART0(message[p]);
  dc:	f8 01       	movw	r30, r16
  de:	81 91       	ld	r24, Z+
  e0:	8f 01       	movw	r16, r30
  e2:	00 d2       	rcall	.+1024   	; 0x4e4 <transmit_UART0>
	}
}

void get_position()
{
	for(int p=0;p<4;p++)
  e4:	0c 17       	cp	r16, r28
  e6:	1d 07       	cpc	r17, r29
  e8:	c9 f7       	brne	.-14     	; 0xdc <get_position+0x14>
  ea:	09 e0       	ldi	r16, 0x09	; 9
  ec:	11 e0       	ldi	r17, 0x01	; 1
  ee:	0f 2e       	mov	r0, r31
  f0:	fd e0       	ldi	r31, 0x0D	; 13
  f2:	ef 2e       	mov	r14, r31
  f4:	f1 e0       	ldi	r31, 0x01	; 1
  f6:	ff 2e       	mov	r15, r31
  f8:	f0 2d       	mov	r31, r0
		transmit_UART0(message[p]);
	}
	
	for(int p=0;p<4;p++)
	{
		position_x[p]= message[p+4];
  fa:	89 91       	ld	r24, Y+
  fc:	f8 01       	movw	r30, r16
  fe:	81 93       	st	Z+, r24
		transmit_UART0(position_x[p]);
 100:	8f 01       	movw	r16, r30
 102:	f0 d1       	rcall	.+992    	; 0x4e4 <transmit_UART0>
	for(int p=0;p<4;p++)
	{
		transmit_UART0(message[p]);
	}
	
	for(int p=0;p<4;p++)
 104:	0e 15       	cp	r16, r14
 106:	1f 05       	cpc	r17, r15
 108:	c1 f7       	brne	.-16     	; 0xfa <get_position+0x32>
 10a:	09 e1       	ldi	r16, 0x19	; 25
 10c:	11 e0       	ldi	r17, 0x01	; 1
 10e:	c9 ee       	ldi	r28, 0xE9	; 233
 110:	d8 e0       	ldi	r29, 0x08	; 8
 112:	0f 2e       	mov	r0, r31
 114:	fd ee       	ldi	r31, 0xED	; 237
 116:	ef 2e       	mov	r14, r31
 118:	f8 e0       	ldi	r31, 0x08	; 8
 11a:	ff 2e       	mov	r15, r31
 11c:	f0 2d       	mov	r31, r0
		transmit_UART0(position_x[p]);
	}	

	for(int p=0;p<4;p++)
	{
		position_y[p]= message[p+8];
 11e:	f8 01       	movw	r30, r16
 120:	81 91       	ld	r24, Z+
 122:	8f 01       	movw	r16, r30
		transmit_UART0(position_y[p]);
 124:	89 93       	st	Y+, r24
 126:	de d1       	rcall	.+956    	; 0x4e4 <transmit_UART0>
	{
		position_x[p]= message[p+4];
		transmit_UART0(position_x[p]);
	}	

	for(int p=0;p<4;p++)
 128:	ce 15       	cp	r28, r14
 12a:	df 05       	cpc	r29, r15
 12c:	c1 f7       	brne	.-16     	; 0x11e <get_position+0x56>
 12e:	0d e1       	ldi	r16, 0x1D	; 29
 130:	11 e0       	ldi	r17, 0x01	; 1
 132:	c5 e0       	ldi	r28, 0x05	; 5
 134:	d1 e0       	ldi	r29, 0x01	; 1
 136:	0f 2e       	mov	r0, r31
 138:	f9 e0       	ldi	r31, 0x09	; 9
 13a:	ef 2e       	mov	r14, r31
 13c:	f1 e0       	ldi	r31, 0x01	; 1
 13e:	ff 2e       	mov	r15, r31
 140:	f0 2d       	mov	r31, r0
		transmit_UART0(position_y[p]);
	}

	for(int p=0;p<4;p++)
	{
		position_z[p]= message[p+12];
 142:	f8 01       	movw	r30, r16
 144:	81 91       	ld	r24, Z+
 146:	8f 01       	movw	r16, r30
		transmit_UART0(position_z[p]);
 148:	89 93       	st	Y+, r24
 14a:	cc d1       	rcall	.+920    	; 0x4e4 <transmit_UART0>
	{
		position_y[p]= message[p+8];
		transmit_UART0(position_y[p]);
	}

	for(int p=0;p<4;p++)
 14c:	ec 16       	cp	r14, r28
 14e:	fd 06       	cpc	r15, r29
 150:	c1 f7       	brne	.-16     	; 0x142 <get_position+0x7a>
	{
		position_z[p]= message[p+12];
		transmit_UART0(position_z[p]);
	}

}
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	1f 91       	pop	r17
 158:	0f 91       	pop	r16
 15a:	ff 90       	pop	r15
 15c:	ef 90       	pop	r14
 15e:	08 95       	ret

00000160 <get_velocity>:

void get_velocity()
{
 160:	ef 92       	push	r14
 162:	ff 92       	push	r15
 164:	0f 93       	push	r16
 166:	1f 93       	push	r17
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	01 e1       	ldi	r16, 0x11	; 17
 16e:	11 e0       	ldi	r17, 0x01	; 1
 170:	c5 e1       	ldi	r28, 0x15	; 21
 172:	d1 e0       	ldi	r29, 0x01	; 1
	for(int v=0;v<4;v++)
	{
		transmit_UART0(message[v]);
 174:	f8 01       	movw	r30, r16
 176:	81 91       	ld	r24, Z+
 178:	8f 01       	movw	r16, r30
 17a:	b4 d1       	rcall	.+872    	; 0x4e4 <transmit_UART0>

}

void get_velocity()
{
	for(int v=0;v<4;v++)
 17c:	0c 17       	cp	r16, r28
 17e:	1d 07       	cpc	r17, r29
 180:	c9 f7       	brne	.-14     	; 0x174 <get_velocity+0x14>
 182:	05 ef       	ldi	r16, 0xF5	; 245
 184:	18 e0       	ldi	r17, 0x08	; 8
 186:	0f 2e       	mov	r0, r31
 188:	f9 ef       	ldi	r31, 0xF9	; 249
 18a:	ef 2e       	mov	r14, r31
 18c:	f8 e0       	ldi	r31, 0x08	; 8
 18e:	ff 2e       	mov	r15, r31
 190:	f0 2d       	mov	r31, r0
		transmit_UART0(message[v]);
	}
		
	for(int v=0;v<4;v++)
	{
		velocity_x[v]=message[v+4];
 192:	89 91       	ld	r24, Y+
 194:	f8 01       	movw	r30, r16
 196:	81 93       	st	Z+, r24
		transmit_UART0(velocity_x[v]);
 198:	8f 01       	movw	r16, r30
 19a:	a4 d1       	rcall	.+840    	; 0x4e4 <transmit_UART0>
	for(int v=0;v<4;v++)
	{
		transmit_UART0(message[v]);
	}
		
	for(int v=0;v<4;v++)
 19c:	0e 15       	cp	r16, r14
 19e:	1f 05       	cpc	r17, r15
 1a0:	c1 f7       	brne	.-16     	; 0x192 <get_velocity+0x32>
 1a2:	09 e1       	ldi	r16, 0x19	; 25
 1a4:	11 e0       	ldi	r17, 0x01	; 1
 1a6:	cd e0       	ldi	r28, 0x0D	; 13
 1a8:	d1 e0       	ldi	r29, 0x01	; 1
 1aa:	0f 2e       	mov	r0, r31
 1ac:	f1 e1       	ldi	r31, 0x11	; 17
 1ae:	ef 2e       	mov	r14, r31
 1b0:	f1 e0       	ldi	r31, 0x01	; 1
 1b2:	ff 2e       	mov	r15, r31
 1b4:	f0 2d       	mov	r31, r0
		transmit_UART0(velocity_x[v]);
	}

	for(int v=0;v<4;v++)
	{
		velocity_y[v]=message[v+8];
 1b6:	f8 01       	movw	r30, r16
 1b8:	81 91       	ld	r24, Z+
 1ba:	8f 01       	movw	r16, r30
		transmit_UART0(velocity_y[v]);
 1bc:	89 93       	st	Y+, r24
 1be:	92 d1       	rcall	.+804    	; 0x4e4 <transmit_UART0>
	{
		velocity_x[v]=message[v+4];
		transmit_UART0(velocity_x[v]);
	}

	for(int v=0;v<4;v++)
 1c0:	ce 15       	cp	r28, r14
 1c2:	df 05       	cpc	r29, r15
 1c4:	c1 f7       	brne	.-16     	; 0x1b6 <get_velocity+0x56>
 1c6:	0d e1       	ldi	r16, 0x1D	; 29
 1c8:	11 e0       	ldi	r17, 0x01	; 1
 1ca:	cd ee       	ldi	r28, 0xED	; 237
 1cc:	d8 e0       	ldi	r29, 0x08	; 8
 1ce:	0f 2e       	mov	r0, r31
 1d0:	f1 ef       	ldi	r31, 0xF1	; 241
 1d2:	ef 2e       	mov	r14, r31
 1d4:	f8 e0       	ldi	r31, 0x08	; 8
 1d6:	ff 2e       	mov	r15, r31
 1d8:	f0 2d       	mov	r31, r0
		transmit_UART0(velocity_y[v]);
	}

	for(int v=0;v<4;v++)
	{
		velocity_z[v]=message[v+12];
 1da:	f8 01       	movw	r30, r16
 1dc:	81 91       	ld	r24, Z+
 1de:	8f 01       	movw	r16, r30
		transmit_UART0(velocity_z[v]);
 1e0:	89 93       	st	Y+, r24
 1e2:	80 d1       	rcall	.+768    	; 0x4e4 <transmit_UART0>
	{
		velocity_y[v]=message[v+8];
		transmit_UART0(velocity_y[v]);
	}

	for(int v=0;v<4;v++)
 1e4:	ec 16       	cp	r14, r28
 1e6:	fd 06       	cpc	r15, r29
 1e8:	c1 f7       	brne	.-16     	; 0x1da <get_velocity+0x7a>
	{
		velocity_z[v]=message[v+12];
		transmit_UART0(velocity_z[v]);
	}

}
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	1f 91       	pop	r17
 1f0:	0f 91       	pop	r16
 1f2:	ff 90       	pop	r15
 1f4:	ef 90       	pop	r14
 1f6:	08 95       	ret

000001f8 <get_time>:

void get_time()
{
 1f8:	cf 92       	push	r12
 1fa:	df 92       	push	r13
 1fc:	ef 92       	push	r14
 1fe:	ff 92       	push	r15
 200:	0f 93       	push	r16
 202:	1f 93       	push	r17
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	c1 e1       	ldi	r28, 0x11	; 17
 20a:	d1 e0       	ldi	r29, 0x01	; 1
 20c:	0f 2e       	mov	r0, r31
 20e:	f5 e1       	ldi	r31, 0x15	; 21
 210:	ef 2e       	mov	r14, r31
 212:	f1 e0       	ldi	r31, 0x01	; 1
 214:	ff 2e       	mov	r15, r31
 216:	f0 2d       	mov	r31, r0
 218:	8e 01       	movw	r16, r28
	for(int t=0;t<4;t++)
	{
		transmit_UART0(message[t]);
 21a:	f8 01       	movw	r30, r16
 21c:	81 91       	ld	r24, Z+
 21e:	8f 01       	movw	r16, r30
 220:	61 d1       	rcall	.+706    	; 0x4e4 <transmit_UART0>

}

void get_time()
{
	for(int t=0;t<4;t++)
 222:	0e 15       	cp	r16, r14
 224:	1f 05       	cpc	r17, r15
 226:	c9 f7       	brne	.-14     	; 0x21a <get_time+0x22>
		transmit_UART0(message[t]);
	}

	for(int t=0;t<3;t++)
	{
		TIME[t]=message[t+4];
 228:	0f 2e       	mov	r0, r31
 22a:	f1 e1       	ldi	r31, 0x11	; 17
 22c:	ef 2e       	mov	r14, r31
 22e:	f1 e0       	ldi	r31, 0x01	; 1
 230:	ff 2e       	mov	r15, r31
 232:	f0 2d       	mov	r31, r0
 234:	f7 01       	movw	r30, r14
 236:	84 81       	ldd	r24, Z+4	; 0x04
 238:	02 e0       	ldi	r16, 0x02	; 2
 23a:	11 e0       	ldi	r17, 0x01	; 1
 23c:	f8 01       	movw	r30, r16
		transmit_UART0(TIME[t]);
 23e:	80 83       	st	Z, r24
 240:	51 d1       	rcall	.+674    	; 0x4e4 <transmit_UART0>
		transmit_UART0(message[t]);
	}

	for(int t=0;t<3;t++)
	{
		TIME[t]=message[t+4];
 242:	f7 01       	movw	r30, r14
 244:	85 81       	ldd	r24, Z+5	; 0x05
 246:	f8 01       	movw	r30, r16
		transmit_UART0(TIME[t]);
 248:	81 83       	std	Z+1, r24	; 0x01
 24a:	4c d1       	rcall	.+664    	; 0x4e4 <transmit_UART0>
		transmit_UART0(message[t]);
	}

	for(int t=0;t<3;t++)
	{
		TIME[t]=message[t+4];
 24c:	f7 01       	movw	r30, r14
 24e:	86 81       	ldd	r24, Z+6	; 0x06
 250:	f8 01       	movw	r30, r16
		transmit_UART0(TIME[t]);
 252:	82 83       	std	Z+2, r24	; 0x02
 254:	47 d1       	rcall	.+654    	; 0x4e4 <transmit_UART0>
 256:	0f 2e       	mov	r0, r31
 258:	f8 e1       	ldi	r31, 0x18	; 24
 25a:	ef 2e       	mov	r14, r31
 25c:	f1 e0       	ldi	r31, 0x01	; 1
 25e:	ff 2e       	mov	r15, r31
 260:	f0 2d       	mov	r31, r0
 262:	01 ee       	ldi	r16, 0xE1	; 225
 264:	18 e0       	ldi	r17, 0x08	; 8
 266:	0f 2e       	mov	r0, r31
 268:	f5 ee       	ldi	r31, 0xE5	; 229
 26a:	cf 2e       	mov	r12, r31
 26c:	f8 e0       	ldi	r31, 0x08	; 8
 26e:	df 2e       	mov	r13, r31
 270:	f0 2d       	mov	r31, r0
	}

	for(int t=0;t<4;t++)
	{
		Date[t]=message[t+7];
 272:	f7 01       	movw	r30, r14
 274:	81 91       	ld	r24, Z+
 276:	7f 01       	movw	r14, r30
 278:	f8 01       	movw	r30, r16
 27a:	81 93       	st	Z+, r24
		transmit_UART0(Date[t]);
 27c:	8f 01       	movw	r16, r30
 27e:	32 d1       	rcall	.+612    	; 0x4e4 <transmit_UART0>
	{
		TIME[t]=message[t+4];
		transmit_UART0(TIME[t]);
	}

	for(int t=0;t<4;t++)
 280:	0c 15       	cp	r16, r12
 282:	1d 05       	cpc	r17, r13
 284:	b1 f7       	brne	.-20     	; 0x272 <get_time+0x7a>
 286:	2a e1       	ldi	r18, 0x1A	; 26
 288:	31 e0       	ldi	r19, 0x01	; 1
		transmit_UART0(Date[t]);
	}

	for(int t=0;t<9;t++)
	{
		message[t] = message[t+13];
 28a:	8d 85       	ldd	r24, Y+13	; 0x0d
 28c:	89 93       	st	Y+, r24
	{
		Date[t]=message[t+7];
		transmit_UART0(Date[t]);
	}

	for(int t=0;t<9;t++)
 28e:	c2 17       	cp	r28, r18
 290:	d3 07       	cpc	r29, r19
 292:	d9 f7       	brne	.-10     	; 0x28a <get_time+0x92>
	{
		message[t] = message[t+13];
	}
}
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	1f 91       	pop	r17
 29a:	0f 91       	pop	r16
 29c:	ff 90       	pop	r15
 29e:	ef 90       	pop	r14
 2a0:	df 90       	pop	r13
 2a2:	cf 90       	pop	r12
 2a4:	08 95       	ret

000002a6 <get_DOP>:

void get_DOP()
{
 2a6:	af 92       	push	r10
 2a8:	bf 92       	push	r11
 2aa:	cf 92       	push	r12
 2ac:	df 92       	push	r13
 2ae:	ef 92       	push	r14
 2b0:	ff 92       	push	r15
 2b2:	0f 93       	push	r16
 2b4:	1f 93       	push	r17
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	c1 e1       	ldi	r28, 0x11	; 17
 2bc:	d1 e0       	ldi	r29, 0x01	; 1
 2be:	0f 2e       	mov	r0, r31
 2c0:	f5 e1       	ldi	r31, 0x15	; 21
 2c2:	ef 2e       	mov	r14, r31
 2c4:	f1 e0       	ldi	r31, 0x01	; 1
 2c6:	ff 2e       	mov	r15, r31
 2c8:	f0 2d       	mov	r31, r0
 2ca:	8e 01       	movw	r16, r28
	for(int d=0;d<4;d++)
	{
		transmit_UART0(message[d]);
 2cc:	f8 01       	movw	r30, r16
 2ce:	81 91       	ld	r24, Z+
 2d0:	8f 01       	movw	r16, r30
 2d2:	08 d1       	rcall	.+528    	; 0x4e4 <transmit_UART0>
	}
}

void get_DOP()
{
	for(int d=0;d<4;d++)
 2d4:	0e 15       	cp	r16, r14
 2d6:	1f 05       	cpc	r17, r15
 2d8:	c9 f7       	brne	.-14     	; 0x2cc <get_DOP+0x26>
		transmit_UART0(message[d]);
	}
	
	for(int d=0;d<2;d++)
	{
		HDOP[d]=message[d+4];
 2da:	01 e1       	ldi	r16, 0x11	; 17
 2dc:	11 e0       	ldi	r17, 0x01	; 1
 2de:	f8 01       	movw	r30, r16
 2e0:	84 81       	ldd	r24, Z+4	; 0x04
 2e2:	0f 2e       	mov	r0, r31
 2e4:	f3 ef       	ldi	r31, 0xF3	; 243
 2e6:	ef 2e       	mov	r14, r31
 2e8:	f8 e0       	ldi	r31, 0x08	; 8
 2ea:	ff 2e       	mov	r15, r31
 2ec:	f0 2d       	mov	r31, r0
 2ee:	f7 01       	movw	r30, r14
		transmit_UART0(HDOP[d]);
 2f0:	80 83       	st	Z, r24
 2f2:	f8 d0       	rcall	.+496    	; 0x4e4 <transmit_UART0>
		transmit_UART0(message[d]);
	}
	
	for(int d=0;d<2;d++)
	{
		HDOP[d]=message[d+4];
 2f4:	f8 01       	movw	r30, r16
 2f6:	85 81       	ldd	r24, Z+5	; 0x05
 2f8:	f7 01       	movw	r30, r14
		transmit_UART0(HDOP[d]);
 2fa:	81 83       	std	Z+1, r24	; 0x01
 2fc:	f3 d0       	rcall	.+486    	; 0x4e4 <transmit_UART0>
	}
	
	for(int d=0;d<2;d++)
	{
		PDOP[d]=message[d+6];
 2fe:	f8 01       	movw	r30, r16
 300:	86 81       	ldd	r24, Z+6	; 0x06
 302:	0f 2e       	mov	r0, r31
 304:	f1 ef       	ldi	r31, 0xF1	; 241
 306:	ef 2e       	mov	r14, r31
 308:	f8 e0       	ldi	r31, 0x08	; 8
 30a:	ff 2e       	mov	r15, r31
 30c:	f0 2d       	mov	r31, r0
 30e:	f7 01       	movw	r30, r14
		transmit_UART0(PDOP[d]);
 310:	80 83       	st	Z, r24
		transmit_UART0(HDOP[d]);
	}
	
	for(int d=0;d<2;d++)
	{
		PDOP[d]=message[d+6];
 312:	e8 d0       	rcall	.+464    	; 0x4e4 <transmit_UART0>
 314:	f8 01       	movw	r30, r16
 316:	87 81       	ldd	r24, Z+7	; 0x07
		transmit_UART0(PDOP[d]);
 318:	f7 01       	movw	r30, r14
 31a:	81 83       	std	Z+1, r24	; 0x01
 31c:	e3 d0       	rcall	.+454    	; 0x4e4 <transmit_UART0>
 31e:	0f 2e       	mov	r0, r31
 320:	f9 e1       	ldi	r31, 0x19	; 25
 322:	ef 2e       	mov	r14, r31
 324:	f1 e0       	ldi	r31, 0x01	; 1
 326:	ff 2e       	mov	r15, r31
 328:	f0 2d       	mov	r31, r0
 32a:	05 ee       	ldi	r16, 0xE5	; 229
 32c:	18 e0       	ldi	r17, 0x08	; 8
 32e:	0f 2e       	mov	r0, r31
 330:	f9 ee       	ldi	r31, 0xE9	; 233
 332:	af 2e       	mov	r10, r31
 334:	f8 e0       	ldi	r31, 0x08	; 8
 336:	bf 2e       	mov	r11, r31
 338:	f0 2d       	mov	r31, r0
	}
	
	for(int d=0;d<4;d++)
	{
		GPS_second[d]=message[d+8];
 33a:	67 01       	movw	r12, r14
 33c:	f6 01       	movw	r30, r12
 33e:	81 91       	ld	r24, Z+
 340:	6f 01       	movw	r12, r30
 342:	f8 01       	movw	r30, r16
		transmit_UART0(GPS_second[d]);
 344:	81 93       	st	Z+, r24
 346:	8f 01       	movw	r16, r30
	{
		PDOP[d]=message[d+6];
		transmit_UART0(PDOP[d]);
	}
	
	for(int d=0;d<4;d++)
 348:	cd d0       	rcall	.+410    	; 0x4e4 <transmit_UART0>
 34a:	0a 15       	cp	r16, r10
 34c:	1b 05       	cpc	r17, r11
		transmit_UART0(GPS_second[d]);
	}
	
	for(int d=0;d<8;d++)
	{
		message[d] = message[d+14];
 34e:	b1 f7       	brne	.-20     	; 0x33c <get_DOP+0x96>
 350:	8e 85       	ldd	r24, Y+14	; 0x0e
	{
		GPS_second[d]=message[d+8];
		transmit_UART0(GPS_second[d]);
	}
	
	for(int d=0;d<8;d++)
 352:	89 93       	st	Y+, r24
 354:	ec 16       	cp	r14, r28
 356:	fd 06       	cpc	r15, r29
	{
		message[d] = message[d+14];
	}
}
 358:	d9 f7       	brne	.-10     	; 0x350 <get_DOP+0xaa>
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	1f 91       	pop	r17
 360:	0f 91       	pop	r16
 362:	ff 90       	pop	r15
 364:	ef 90       	pop	r14
 366:	df 90       	pop	r13
 368:	cf 90       	pop	r12
 36a:	bf 90       	pop	r11
 36c:	af 90       	pop	r10
 36e:	08 95       	ret

00000370 <message_ID>:
	sei();
}

void message_ID()
{
	if(message[2] == 0x04 && message[3] == 0xAC)
 370:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <message+0x2>
 374:	84 30       	cpi	r24, 0x04	; 4
 376:	51 f4       	brne	.+20     	; 0x38c <message_ID+0x1c>
 378:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <message+0x3>
 37c:	8c 3a       	cpi	r24, 0xAC	; 172
	{
		get_position();
 37e:	11 f5       	brne	.+68     	; 0x3c4 <message_ID+0x54>
		i=0;
 380:	a3 de       	rcall	.-698    	; 0xc8 <get_position>
 382:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_end+0x1>
 386:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
	}
	else if(message[2]==0x05 && message[3]== 0xAC)
 38a:	08 95       	ret
 38c:	85 30       	cpi	r24, 0x05	; 5
 38e:	51 f4       	brne	.+20     	; 0x3a4 <message_ID+0x34>
 390:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <message+0x3>
	{
		get_velocity();
 394:	8c 3a       	cpi	r24, 0xAC	; 172
 396:	b1 f4       	brne	.+44     	; 0x3c4 <message_ID+0x54>
		i=0;
 398:	e3 de       	rcall	.-570    	; 0x160 <get_velocity>
 39a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_end+0x1>
 39e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
	}
	else if(message[2]==0x0F && message[3]== 0xAC)
 3a2:	08 95       	ret
 3a4:	8f 30       	cpi	r24, 0x0F	; 15
 3a6:	61 f4       	brne	.+24     	; 0x3c0 <message_ID+0x50>
 3a8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <message+0x3>
	{
		get_time();
 3ac:	8c 3a       	cpi	r24, 0xAC	; 172
 3ae:	51 f4       	brne	.+20     	; 0x3c4 <message_ID+0x54>
		i=9;
 3b0:	23 df       	rcall	.-442    	; 0x1f8 <get_time>
 3b2:	89 e0       	ldi	r24, 0x09	; 9
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 3ba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
	}
	else if(message[2]==0x0B && message[3]== 0xAC)
 3be:	08 95       	ret
 3c0:	8b 30       	cpi	r24, 0x0B	; 11
		get_DOP();
		i=8;
	}
	else
	{
		for(int shift=0; shift<(i-14) ;shift++)
 3c2:	51 f0       	breq	.+20     	; 0x3d8 <message_ID+0x68>
 3c4:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_end>
 3c8:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__data_end+0x1>
 3cc:	ca 01       	movw	r24, r20
 3ce:	0e 97       	sbiw	r24, 0x0e	; 14
 3d0:	18 16       	cp	r1, r24
 3d2:	19 06       	cpc	r1, r25
 3d4:	6c f0       	brlt	.+26     	; 0x3f0 <message_ID+0x80>
	else if(message[2]==0x0F && message[3]== 0xAC)
	{
		get_time();
		i=9;
	}
	else if(message[2]==0x0B && message[3]== 0xAC)
 3d6:	16 c0       	rjmp	.+44     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3d8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <message+0x3>
	{
		get_DOP();
 3dc:	8c 3a       	cpi	r24, 0xAC	; 172
 3de:	91 f7       	brne	.-28     	; 0x3c4 <message_ID+0x54>
		i=8;
 3e0:	62 df       	rcall	.-316    	; 0x2a6 <get_DOP>
 3e2:	88 e0       	ldi	r24, 0x08	; 8
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 3ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 3ee:	08 95       	ret
 3f0:	e1 e1       	ldi	r30, 0x11	; 17
 3f2:	f1 e0       	ldi	r31, 0x01	; 1
 3f4:	9a 01       	movw	r18, r20
 3f6:	2d 5f       	subi	r18, 0xFD	; 253
	}
	else
	{
		for(int shift=0; shift<(i-14) ;shift++)
		{
			message[shift]=message[shift+14];
 3f8:	3e 4f       	sbci	r19, 0xFE	; 254
 3fa:	86 85       	ldd	r24, Z+14	; 0x0e
		get_DOP();
		i=8;
	}
	else
	{
		for(int shift=0; shift<(i-14) ;shift++)
 3fc:	81 93       	st	Z+, r24
 3fe:	2e 17       	cp	r18, r30
 400:	3f 07       	cpc	r19, r31
		{
			message[shift]=message[shift+14];
		}
		i=i-8;
 402:	d9 f7       	brne	.-10     	; 0x3fa <message_ID+0x8a>
 404:	48 50       	subi	r20, 0x08	; 8
 406:	51 09       	sbc	r21, r1
 408:	50 93 01 01 	sts	0x0101, r21	; 0x800101 <__data_end+0x1>
 40c:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <__data_end>
 410:	08 95       	ret

00000412 <__vector_18>:
uint8_t GPS_second[4];
uint8_t message[2000];
int i=0;

ISR(USART0_RX_vect)
{
 412:	1f 92       	push	r1
 414:	0f 92       	push	r0
 416:	0f b6       	in	r0, 0x3f	; 63
 418:	0f 92       	push	r0
 41a:	11 24       	eor	r1, r1
 41c:	0b b6       	in	r0, 0x3b	; 59
 41e:	0f 92       	push	r0
 420:	2f 93       	push	r18
 422:	3f 93       	push	r19
 424:	4f 93       	push	r20
 426:	5f 93       	push	r21
 428:	6f 93       	push	r22
 42a:	7f 93       	push	r23
 42c:	8f 93       	push	r24
 42e:	9f 93       	push	r25
 430:	af 93       	push	r26
 432:	bf 93       	push	r27
 434:	ef 93       	push	r30
 436:	ff 93       	push	r31
	cli();
 438:	f8 94       	cli
	message[i]=UDR0;
 43a:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_end>
 43e:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__data_end+0x1>
 442:	8c b1       	in	r24, 0x0c	; 12
 444:	fa 01       	movw	r30, r20
 446:	ef 5e       	subi	r30, 0xEF	; 239
 448:	fe 4f       	sbci	r31, 0xFE	; 254
 44a:	80 83       	st	Z, r24
	i=i+1;
 44c:	ca 01       	movw	r24, r20
 44e:	01 96       	adiw	r24, 0x01	; 1
 450:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 454:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
	if(i>=22)
 458:	46 97       	sbiw	r24, 0x16	; 22
 45a:	e4 f0       	brlt	.+56     	; 0x494 <__vector_18+0x82>
	{
		if(message[0]==0x3F && message[1]==0x3F)
 45c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <message>
 460:	8f 33       	cpi	r24, 0x3F	; 63
 462:	21 f0       	breq	.+8      	; 0x46c <__vector_18+0x5a>
		{
			message_ID();
		}
		else
		{
			for(int shift=0; shift<(i-1) ;shift++)
 464:	14 16       	cp	r1, r20
 466:	15 06       	cpc	r1, r21
 468:	3c f0       	brlt	.+14     	; 0x478 <__vector_18+0x66>
 46a:	10 c0       	rjmp	.+32     	; 0x48c <__vector_18+0x7a>
	cli();
	message[i]=UDR0;
	i=i+1;
	if(i>=22)
	{
		if(message[0]==0x3F && message[1]==0x3F)
 46c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <message+0x1>
 470:	8f 33       	cpi	r24, 0x3F	; 63
		{
			message_ID();
 472:	c1 f7       	brne	.-16     	; 0x464 <__vector_18+0x52>
 474:	7d df       	rcall	.-262    	; 0x370 <message_ID>
 476:	0e c0       	rjmp	.+28     	; 0x494 <__vector_18+0x82>
 478:	e1 e1       	ldi	r30, 0x11	; 17
 47a:	f1 e0       	ldi	r31, 0x01	; 1
 47c:	9a 01       	movw	r18, r20
 47e:	2f 5e       	subi	r18, 0xEF	; 239
		}
		else
		{
			for(int shift=0; shift<(i-1) ;shift++)
			{
				message[shift]=message[shift+1];
 480:	3e 4f       	sbci	r19, 0xFE	; 254
 482:	81 81       	ldd	r24, Z+1	; 0x01
		{
			message_ID();
		}
		else
		{
			for(int shift=0; shift<(i-1) ;shift++)
 484:	81 93       	st	Z+, r24
 486:	e2 17       	cp	r30, r18
 488:	f3 07       	cpc	r31, r19
			{
				message[shift]=message[shift+1];
			}
			i=i-1;
 48a:	d9 f7       	brne	.-10     	; 0x482 <__vector_18+0x70>
 48c:	50 93 01 01 	sts	0x0101, r21	; 0x800101 <__data_end+0x1>
 490:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <__data_end>
		}
	}
	sei();
}
 494:	78 94       	sei
 496:	ff 91       	pop	r31
 498:	ef 91       	pop	r30
 49a:	bf 91       	pop	r27
 49c:	af 91       	pop	r26
 49e:	9f 91       	pop	r25
 4a0:	8f 91       	pop	r24
 4a2:	7f 91       	pop	r23
 4a4:	6f 91       	pop	r22
 4a6:	5f 91       	pop	r21
 4a8:	4f 91       	pop	r20
 4aa:	3f 91       	pop	r19
 4ac:	2f 91       	pop	r18
 4ae:	0f 90       	pop	r0
 4b0:	0b be       	out	0x3b, r0	; 59
 4b2:	0f 90       	pop	r0
 4b4:	0f be       	out	0x3f, r0	; 63
 4b6:	0f 90       	pop	r0
 4b8:	1f 90       	pop	r1
 4ba:	18 95       	reti

000004bc <main>:
#include "led_tests.h"
#include "gps.h"

int main(void)

{
 4bc:	02 d0       	rcall	.+4      	; 0x4c2 <init_UART0>
 4be:	78 94       	sei
 4c0:	ff cf       	rjmp	.-2      	; 0x4c0 <main+0x4>

000004c2 <init_UART0>:
void transmit_UART1(char data)
{
  //* Wait for empty transmit buffer 
  while ( !(UCSR1A & (_BV(UDRE1))) );
  //* Start transmission
  UDR1 = data;
 4c2:	1b b8       	out	0x0b, r1	; 11
 4c4:	1a b8       	out	0x0a, r1	; 10
 4c6:	e5 e9       	ldi	r30, 0x95	; 149
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	10 82       	st	Z, r1
 4cc:	59 9a       	sbi	0x0b, 1	; 11
 4ce:	8a b1       	in	r24, 0x0a	; 10
 4d0:	88 69       	ori	r24, 0x98	; 152
 4d2:	8a b9       	out	0x0a, r24	; 10
 4d4:	80 81       	ld	r24, Z
 4d6:	8e 60       	ori	r24, 0x0E	; 14
 4d8:	80 83       	st	Z, r24
 4da:	87 e6       	ldi	r24, 0x67	; 103
 4dc:	89 b9       	out	0x09, r24	; 9
 4de:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 4e2:	08 95       	ret

000004e4 <transmit_UART0>:
}

void transmit_UART0(uint8_t data)
{
  //* Wait for empty transmit buffer 
  while ( !(UCSR0A & (_BV(UDRE0))) );
 4e4:	5d 9b       	sbis	0x0b, 5	; 11
 4e6:	fe cf       	rjmp	.-4      	; 0x4e4 <transmit_UART0>
  //* Start transmission
  UDR0 = data;
 4e8:	8c b9       	out	0x0c, r24	; 12
 4ea:	08 95       	ret

000004ec <_exit>:
 4ec:	f8 94       	cli

000004ee <__stop_program>:
 4ee:	ff cf       	rjmp	.-2      	; 0x4ee <__stop_program>
