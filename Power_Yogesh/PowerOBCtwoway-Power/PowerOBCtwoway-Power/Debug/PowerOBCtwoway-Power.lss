
PowerOBCtwoway-Power.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000502  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000502  00000596  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800062  00800062  00000598  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e1d  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000969  00000000  00000000  00001501  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a1c  00000000  00000000  00001e6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  00002888  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000587  00000000  00000000  00002a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000052e  00000000  00000000  00002fab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000034d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e0       	ldi	r30, 0x02	; 2
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 21 01 	call	0x242	; 0x242 <main>
  8a:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_Convert>:
	HM_data[0]=0x82;
}
void Safe_Mode_off() {
	PORTB &= (0<<PINB0);	//Beacon
	PORTC |= (1<<PINC6); //REG 5v
	HM_data[0]=0x00;
  92:	83 30       	cpi	r24, 0x03	; 3
  94:	39 f1       	breq	.+78     	; 0xe4 <ADC_Convert+0x52>
  96:	28 f4       	brcc	.+10     	; 0xa2 <ADC_Convert+0x10>
  98:	81 30       	cpi	r24, 0x01	; 1
  9a:	41 f0       	breq	.+16     	; 0xac <ADC_Convert+0x1a>
  9c:	82 30       	cpi	r24, 0x02	; 2
  9e:	a1 f0       	breq	.+40     	; 0xc8 <ADC_Convert+0x36>
  a0:	4b c0       	rjmp	.+150    	; 0x138 <ADC_Convert+0xa6>
  a2:	84 30       	cpi	r24, 0x04	; 4
  a4:	69 f1       	breq	.+90     	; 0x100 <ADC_Convert+0x6e>
  a6:	85 30       	cpi	r24, 0x05	; 5
  a8:	c9 f1       	breq	.+114    	; 0x11c <ADC_Convert+0x8a>
  aa:	46 c0       	rjmp	.+140    	; 0x138 <ADC_Convert+0xa6>
  ac:	81 e6       	ldi	r24, 0x61	; 97
  ae:	87 b9       	out	0x07, r24	; 7
  b0:	85 ec       	ldi	r24, 0xC5	; 197
  b2:	86 b9       	out	0x06, r24	; 6
  b4:	8f e1       	ldi	r24, 0x1F	; 31
  b6:	9e e4       	ldi	r25, 0x4E	; 78
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <ADC_Convert+0x26>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <ADC_Convert+0x2c>
  be:	00 00       	nop
  c0:	36 99       	sbic	0x06, 6	; 6
  c2:	fe cf       	rjmp	.-4      	; 0xc0 <ADC_Convert+0x2e>
  c4:	85 b1       	in	r24, 0x05	; 5
  c6:	08 95       	ret
  c8:	83 e6       	ldi	r24, 0x63	; 99
  ca:	87 b9       	out	0x07, r24	; 7
  cc:	85 ec       	ldi	r24, 0xC5	; 197
  ce:	86 b9       	out	0x06, r24	; 6
  d0:	8f e1       	ldi	r24, 0x1F	; 31
  d2:	9e e4       	ldi	r25, 0x4E	; 78
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <ADC_Convert+0x42>
  d8:	00 c0       	rjmp	.+0      	; 0xda <ADC_Convert+0x48>
  da:	00 00       	nop
  dc:	36 99       	sbic	0x06, 6	; 6
  de:	fe cf       	rjmp	.-4      	; 0xdc <ADC_Convert+0x4a>
  e0:	85 b1       	in	r24, 0x05	; 5
  e2:	08 95       	ret
  e4:	84 e6       	ldi	r24, 0x64	; 100
  e6:	87 b9       	out	0x07, r24	; 7
  e8:	85 ec       	ldi	r24, 0xC5	; 197
  ea:	86 b9       	out	0x06, r24	; 6
  ec:	8f e1       	ldi	r24, 0x1F	; 31
  ee:	9e e4       	ldi	r25, 0x4E	; 78
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <ADC_Convert+0x5e>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <ADC_Convert+0x64>
  f6:	00 00       	nop
  f8:	36 99       	sbic	0x06, 6	; 6
  fa:	fe cf       	rjmp	.-4      	; 0xf8 <ADC_Convert+0x66>
  fc:	85 b1       	in	r24, 0x05	; 5
  fe:	08 95       	ret
 100:	80 e6       	ldi	r24, 0x60	; 96
 102:	87 b9       	out	0x07, r24	; 7
 104:	85 ec       	ldi	r24, 0xC5	; 197
 106:	86 b9       	out	0x06, r24	; 6
 108:	8f e1       	ldi	r24, 0x1F	; 31
 10a:	9e e4       	ldi	r25, 0x4E	; 78
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <ADC_Convert+0x7a>
 110:	00 c0       	rjmp	.+0      	; 0x112 <ADC_Convert+0x80>
 112:	00 00       	nop
 114:	36 99       	sbic	0x06, 6	; 6
 116:	fe cf       	rjmp	.-4      	; 0x114 <ADC_Convert+0x82>
 118:	85 b1       	in	r24, 0x05	; 5
 11a:	08 95       	ret
 11c:	82 e6       	ldi	r24, 0x62	; 98
 11e:	87 b9       	out	0x07, r24	; 7
 120:	85 ec       	ldi	r24, 0xC5	; 197
 122:	86 b9       	out	0x06, r24	; 6
 124:	8f e1       	ldi	r24, 0x1F	; 31
 126:	9e e4       	ldi	r25, 0x4E	; 78
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <ADC_Convert+0x96>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <ADC_Convert+0x9c>
 12e:	00 00       	nop
 130:	36 99       	sbic	0x06, 6	; 6
 132:	fe cf       	rjmp	.-4      	; 0x130 <ADC_Convert+0x9e>
 134:	85 b1       	in	r24, 0x05	; 5
 136:	08 95       	ret
 138:	08 95       	ret

0000013a <Startup_all>:
 13a:	8b b3       	in	r24, 0x1b	; 27
 13c:	8b bb       	out	0x1b, r24	; 27
 13e:	88 b3       	in	r24, 0x18	; 24
 140:	8e 60       	ori	r24, 0x0E	; 14
 142:	88 bb       	out	0x18, r24	; 24
 144:	85 b3       	in	r24, 0x15	; 21
 146:	84 6c       	ori	r24, 0xC4	; 196
 148:	85 bb       	out	0x15, r24	; 21
 14a:	94 9a       	sbi	0x12, 4	; 18
 14c:	eb e6       	ldi	r30, 0x6B	; 107
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	8e 6f       	ori	r24, 0xFE	; 254
 154:	80 83       	st	Z, r24
 156:	08 95       	ret

00000158 <Startup>:
 158:	88 23       	and	r24, r24
 15a:	3c f4       	brge	.+14     	; 0x16a <Startup+0x12>
 15c:	c0 9a       	sbi	0x18, 0	; 24
 15e:	eb e6       	ldi	r30, 0x6B	; 107
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	90 81       	ld	r25, Z
 164:	90 68       	ori	r25, 0x80	; 128
 166:	90 83       	st	Z, r25
 168:	07 c0       	rjmp	.+14     	; 0x178 <Startup+0x20>
 16a:	98 b3       	in	r25, 0x18	; 24
 16c:	18 ba       	out	0x18, r1	; 24
 16e:	eb e6       	ldi	r30, 0x6B	; 107
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	90 81       	ld	r25, Z
 174:	9e 77       	andi	r25, 0x7E	; 126
 176:	90 83       	st	Z, r25
 178:	86 ff       	sbrs	r24, 6
 17a:	07 c0       	rjmp	.+14     	; 0x18a <Startup+0x32>
 17c:	c2 9a       	sbi	0x18, 2	; 24
 17e:	eb e6       	ldi	r30, 0x6B	; 107
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	90 81       	ld	r25, Z
 184:	90 64       	ori	r25, 0x40	; 64
 186:	90 83       	st	Z, r25
 188:	07 c0       	rjmp	.+14     	; 0x198 <Startup+0x40>
 18a:	98 b3       	in	r25, 0x18	; 24
 18c:	18 ba       	out	0x18, r1	; 24
 18e:	eb e6       	ldi	r30, 0x6B	; 107
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	90 81       	ld	r25, Z
 194:	9e 7b       	andi	r25, 0xBE	; 190
 196:	90 83       	st	Z, r25
 198:	85 ff       	sbrs	r24, 5
 19a:	08 c0       	rjmp	.+16     	; 0x1ac <Startup+0x54>
 19c:	92 b3       	in	r25, 0x12	; 18
 19e:	12 ba       	out	0x12, r1	; 18
 1a0:	eb e6       	ldi	r30, 0x6B	; 107
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	90 81       	ld	r25, Z
 1a6:	90 62       	ori	r25, 0x20	; 32
 1a8:	90 83       	st	Z, r25
 1aa:	06 c0       	rjmp	.+12     	; 0x1b8 <Startup+0x60>
 1ac:	97 9a       	sbi	0x12, 7	; 18
 1ae:	eb e6       	ldi	r30, 0x6B	; 107
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	90 81       	ld	r25, Z
 1b4:	9e 7d       	andi	r25, 0xDE	; 222
 1b6:	90 83       	st	Z, r25
 1b8:	84 ff       	sbrs	r24, 4
 1ba:	08 c0       	rjmp	.+16     	; 0x1cc <Startup+0x74>
 1bc:	9b b3       	in	r25, 0x1b	; 27
 1be:	1b ba       	out	0x1b, r1	; 27
 1c0:	eb e6       	ldi	r30, 0x6B	; 107
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	90 81       	ld	r25, Z
 1c6:	90 61       	ori	r25, 0x10	; 16
 1c8:	90 83       	st	Z, r25
 1ca:	06 c0       	rjmp	.+12     	; 0x1d8 <Startup+0x80>
 1cc:	df 9a       	sbi	0x1b, 7	; 27
 1ce:	eb e6       	ldi	r30, 0x6B	; 107
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	90 81       	ld	r25, Z
 1d4:	9e 7e       	andi	r25, 0xEE	; 238
 1d6:	90 83       	st	Z, r25
 1d8:	83 ff       	sbrs	r24, 3
 1da:	08 c0       	rjmp	.+16     	; 0x1ec <Startup+0x94>
 1dc:	9b b3       	in	r25, 0x1b	; 27
 1de:	1b ba       	out	0x1b, r1	; 27
 1e0:	eb e6       	ldi	r30, 0x6B	; 107
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	90 81       	ld	r25, Z
 1e6:	98 60       	ori	r25, 0x08	; 8
 1e8:	90 83       	st	Z, r25
 1ea:	06 c0       	rjmp	.+12     	; 0x1f8 <Startup+0xa0>
 1ec:	de 9a       	sbi	0x1b, 6	; 27
 1ee:	eb e6       	ldi	r30, 0x6B	; 107
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	90 81       	ld	r25, Z
 1f4:	96 7f       	andi	r25, 0xF6	; 246
 1f6:	90 83       	st	Z, r25
 1f8:	82 ff       	sbrs	r24, 2
 1fa:	07 c0       	rjmp	.+14     	; 0x20a <Startup+0xb2>
 1fc:	c3 9a       	sbi	0x18, 3	; 24
 1fe:	eb e6       	ldi	r30, 0x6B	; 107
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	90 81       	ld	r25, Z
 204:	94 60       	ori	r25, 0x04	; 4
 206:	90 83       	st	Z, r25
 208:	07 c0       	rjmp	.+14     	; 0x218 <Startup+0xc0>
 20a:	98 b3       	in	r25, 0x18	; 24
 20c:	18 ba       	out	0x18, r1	; 24
 20e:	eb e6       	ldi	r30, 0x6B	; 107
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	90 81       	ld	r25, Z
 214:	9a 7f       	andi	r25, 0xFA	; 250
 216:	90 83       	st	Z, r25
 218:	81 ff       	sbrs	r24, 1
 21a:	08 c0       	rjmp	.+16     	; 0x22c <Startup+0xd4>
 21c:	95 b3       	in	r25, 0x15	; 21
 21e:	15 ba       	out	0x15, r1	; 21
 220:	eb e6       	ldi	r30, 0x6B	; 107
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	90 81       	ld	r25, Z
 226:	92 60       	ori	r25, 0x02	; 2
 228:	90 83       	st	Z, r25
 22a:	06 c0       	rjmp	.+12     	; 0x238 <Startup+0xe0>
 22c:	ae 9a       	sbi	0x15, 6	; 21
 22e:	eb e6       	ldi	r30, 0x6B	; 107
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	90 81       	ld	r25, Z
 234:	9c 7f       	andi	r25, 0xFC	; 252
 236:	90 83       	st	Z, r25
 238:	8e 3f       	cpi	r24, 0xFE	; 254
 23a:	11 f4       	brne	.+4      	; 0x240 <Startup+0xe8>
 23c:	0e 94 9d 00 	call	0x13a	; 0x13a <Startup_all>
 240:	08 95       	ret

00000242 <main>:
}
int main(void)
{	DDRA=0b11000000;
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	cd b7       	in	r28, 0x3d	; 61
 248:	de b7       	in	r29, 0x3e	; 62
 24a:	28 97       	sbiw	r28, 0x08	; 8
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	f8 94       	cli
 250:	de bf       	out	0x3e, r29	; 62
 252:	0f be       	out	0x3f, r0	; 63
 254:	cd bf       	out	0x3d, r28	; 61
 256:	80 ec       	ldi	r24, 0xC0	; 192
 258:	8a bb       	out	0x1a, r24	; 26
	DDRB=0b00001110;
 25a:	8e e0       	ldi	r24, 0x0E	; 14
 25c:	87 bb       	out	0x17, r24	; 23
	DDRC=0b11000100;
 25e:	84 ec       	ldi	r24, 0xC4	; 196
 260:	84 bb       	out	0x14, r24	; 20
	DDRD=0b11010000;
 262:	80 ed       	ldi	r24, 0xD0	; 208
 264:	81 bb       	out	0x11, r24	; 17
	init_UART();
 266:	0e 94 6d 02 	call	0x4da	; 0x4da <init_UART>
	sei();
 26a:	78 94       	sei
	sleep_enable();
	sleep_mode();
	sleep_disable();
	_delay_ms(100);
	GICR&=~(1<<INT0);*/
    Startup_all();
 26c:	0e 94 9d 00 	call	0x13a	; 0x13a <Startup_all>
	//unsigned char HM_data[7];
	uint8_t msg_buf[8];
	unsigned char SLA=0x20;
	//msg_buf[0] ='9';
	//HM_data[0]='9';
	TWI_Slave_Initialise(SLA);
 270:	80 e2       	ldi	r24, 0x20	; 32
 272:	0e 94 82 01 	call	0x304	; 0x304 <TWI_Slave_Initialise>
	
	TWI_Start_Transceiver_With_Data(msg_buf,1);
 276:	61 e0       	ldi	r22, 0x01	; 1
 278:	ce 01       	movw	r24, r28
 27a:	01 96       	adiw	r24, 0x01	; 1
 27c:	0e 94 88 01 	call	0x310	; 0x310 <TWI_Start_Transceiver_With_Data>
		for (uint8_t i=1;i<6;i++)
		{
			HM_data[i]=ADC_Convert(i);
		}
		if(1){HM_data[6]=0x00;
		HM_data[6]|=(PINB1<<7)|(PIND3<<6)|(PIND5<<5)|(PINC3<<4)|((~PINC4)<<3);}
 280:	0f 2e       	mov	r0, r31
 282:	fb e6       	ldi	r31, 0x6B	; 107
 284:	cf 2e       	mov	r12, r31
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	df 2e       	mov	r13, r31
 28a:	f0 2d       	mov	r31, r0
 28c:	08 ef       	ldi	r16, 0xF8	; 248
	
	TWI_Start_Transceiver_With_Data(msg_buf,1);
    while (1) 
    {
		
		uint8_t z = TWI_Get_Data_From_Transceiver(msg_buf , 1);//sr
 28e:	61 e0       	ldi	r22, 0x01	; 1
 290:	ce 01       	movw	r24, r28
 292:	01 96       	adiw	r24, 0x01	; 1
 294:	0e 94 ab 01 	call	0x356	; 0x356 <TWI_Get_Data_From_Transceiver>
		transmit_UART(msg_buf[0]);//sr
 298:	89 81       	ldd	r24, Y+1	; 0x01
 29a:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <transmit_UART>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29e:	2f ef       	ldi	r18, 0xFF	; 255
 2a0:	84 e3       	ldi	r24, 0x34	; 52
 2a2:	9c e0       	ldi	r25, 0x0C	; 12
 2a4:	21 50       	subi	r18, 0x01	; 1
 2a6:	80 40       	sbci	r24, 0x00	; 0
 2a8:	90 40       	sbci	r25, 0x00	; 0
 2aa:	e1 f7       	brne	.-8      	; 0x2a4 <main+0x62>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <main+0x6c>
 2ae:	00 00       	nop
 2b0:	0f 2e       	mov	r0, r31
 2b2:	fc e6       	ldi	r31, 0x6C	; 108
 2b4:	ef 2e       	mov	r14, r31
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	ff 2e       	mov	r15, r31
 2ba:	f0 2d       	mov	r31, r0
		//TWI_Start_Transceiver_With_Data(HM_data,1);
		_delay_ms(500);//sr
		for (uint8_t i=1;i<6;i++)
 2bc:	11 e0       	ldi	r17, 0x01	; 1
		{
			HM_data[i]=ADC_Convert(i);
 2be:	81 2f       	mov	r24, r17
 2c0:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Convert>
 2c4:	f7 01       	movw	r30, r14
 2c6:	81 93       	st	Z+, r24
 2c8:	7f 01       	movw	r14, r30
		
		uint8_t z = TWI_Get_Data_From_Transceiver(msg_buf , 1);//sr
		transmit_UART(msg_buf[0]);//sr
		//TWI_Start_Transceiver_With_Data(HM_data,1);
		_delay_ms(500);//sr
		for (uint8_t i=1;i<6;i++)
 2ca:	1f 5f       	subi	r17, 0xFF	; 255
 2cc:	16 30       	cpi	r17, 0x06	; 6
 2ce:	b9 f7       	brne	.-18     	; 0x2be <main+0x7c>
		{
			HM_data[i]=ADC_Convert(i);
		}
		if(1){HM_data[6]=0x00;
		HM_data[6]|=(PINB1<<7)|(PIND3<<6)|(PIND5<<5)|(PINC3<<4)|((~PINC4)<<3);}
 2d0:	f6 01       	movw	r30, r12
 2d2:	06 83       	std	Z+6, r16	; 0x06
		/*for (int i=0;i<8;i++)
		{transmit_UART(HM_data[i]);
		 transmit_UART(i);}*/
		command=msg_buf[0];
 2d4:	89 81       	ldd	r24, Y+1	; 0x01
 2d6:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <command>
		//Stop(command);
		transmit_UART(HM_data[0]);
 2da:	80 81       	ld	r24, Z
 2dc:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <transmit_UART>
		Startup(command);
 2e0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <command>
 2e4:	0e 94 ac 00 	call	0x158	; 0x158 <Startup>
		transmit_UART(HM_data[0]);
 2e8:	f6 01       	movw	r30, r12
 2ea:	80 81       	ld	r24, Z
 2ec:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <transmit_UART>
 2f0:	ff ef       	ldi	r31, 0xFF	; 255
 2f2:	24 e3       	ldi	r18, 0x34	; 52
 2f4:	8c e0       	ldi	r24, 0x0C	; 12
 2f6:	f1 50       	subi	r31, 0x01	; 1
 2f8:	20 40       	sbci	r18, 0x00	; 0
 2fa:	80 40       	sbci	r24, 0x00	; 0
 2fc:	e1 f7       	brne	.-8      	; 0x2f6 <main+0xb4>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <main+0xbe>
 300:	00 00       	nop
 302:	c5 cf       	rjmp	.-118    	; 0x28e <main+0x4c>

00000304 <TWI_Slave_Initialise>:
  TWI_state         = TWI_NO_STATE ;
  TWCR = (1<<TWEN)|                             // TWI Interface enabled.
         (1<<TWIE)|(1<<TWINT)|                  // Enable TWI Interupt and clear the flag.
         (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|       // Prepare to ACK next time the Slave is addressed.
         (0<<TWWC);                             //
  TWI_busy = 0;
 304:	82 b9       	out	0x02, r24	; 2
 306:	84 e0       	ldi	r24, 0x04	; 4
 308:	86 bf       	out	0x36, r24	; 54
 30a:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <TWI_busy>
 30e:	08 95       	ret

00000310 <TWI_Start_Transceiver_With_Data>:
 310:	9c 01       	movw	r18, r24
 312:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <TWI_busy>
 316:	91 11       	cpse	r25, r1
 318:	fe cf       	rjmp	.-4      	; 0x316 <TWI_Start_Transceiver_With_Data+0x6>
 31a:	60 93 65 00 	sts	0x0065, r22	; 0x800065 <TWI_msgSize>
 31e:	66 23       	and	r22, r22
 320:	79 f0       	breq	.+30     	; 0x340 <TWI_Start_Transceiver_With_Data+0x30>
 322:	f9 01       	movw	r30, r18
 324:	a6 e6       	ldi	r26, 0x66	; 102
 326:	b0 e0       	ldi	r27, 0x00	; 0
 328:	61 50       	subi	r22, 0x01	; 1
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	6f 5f       	subi	r22, 0xFF	; 255
 32e:	7f 4f       	sbci	r23, 0xFF	; 255
 330:	c9 01       	movw	r24, r18
 332:	86 0f       	add	r24, r22
 334:	97 1f       	adc	r25, r23
 336:	21 91       	ld	r18, Z+
 338:	2d 93       	st	X+, r18
 33a:	e8 17       	cp	r30, r24
 33c:	f9 07       	cpc	r31, r25
 33e:	d9 f7       	brne	.-10     	; 0x336 <TWI_Start_Transceiver_With_Data+0x26>
 340:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <TWI_statusReg>
 344:	88 ef       	ldi	r24, 0xF8	; 248
 346:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 34a:	85 ec       	ldi	r24, 0xC5	; 197
 34c:	86 bf       	out	0x36, r24	; 54
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <TWI_busy>
 354:	08 95       	ret

00000356 <TWI_Get_Data_From_Transceiver>:
****************************************************************************/
unsigned char TWI_Get_Data_From_Transceiver( uint8_t *msg, unsigned char msgSize )
{
  uint8_t i;

  while ( TWI_Transceiver_Busy() ) {_delay_ms(0.0000001);}             // Wait until TWI is ready for next transmission.
 356:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <TWI_busy>
 35a:	22 23       	and	r18, r18
 35c:	29 f0       	breq	.+10     	; 0x368 <TWI_Get_Data_From_Transceiver+0x12>
 35e:	00 00       	nop
 360:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <TWI_busy>
 364:	21 11       	cpse	r18, r1
 366:	fb cf       	rjmp	.-10     	; 0x35e <TWI_Get_Data_From_Transceiver+0x8>

  if( TWI_statusReg.lastTransOK )               // Last transmission completed successfully.              
 368:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <TWI_statusReg>
 36c:	20 ff       	sbrs	r18, 0
 36e:	15 c0       	rjmp	.+42     	; 0x39a <TWI_Get_Data_From_Transceiver+0x44>
  {                                             
    for ( i=0; i<msgSize; i++ )                 // Copy data from Transceiver buffer.
 370:	66 23       	and	r22, r22
 372:	71 f0       	breq	.+28     	; 0x390 <TWI_Get_Data_From_Transceiver+0x3a>
 374:	e6 e6       	ldi	r30, 0x66	; 102
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	a8 2f       	mov	r26, r24
 37a:	b9 2f       	mov	r27, r25
 37c:	61 50       	subi	r22, 0x01	; 1
 37e:	86 2f       	mov	r24, r22
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	89 59       	subi	r24, 0x99	; 153
 384:	9f 4f       	sbci	r25, 0xFF	; 255
    {
      msg[ i ] = TWI_buf[ i ];
 386:	21 91       	ld	r18, Z+
 388:	2d 93       	st	X+, r18

  while ( TWI_Transceiver_Busy() ) {_delay_ms(0.0000001);}             // Wait until TWI is ready for next transmission.

  if( TWI_statusReg.lastTransOK )               // Last transmission completed successfully.              
  {                                             
    for ( i=0; i<msgSize; i++ )                 // Copy data from Transceiver buffer.
 38a:	e8 17       	cp	r30, r24
 38c:	f9 07       	cpc	r31, r25
 38e:	d9 f7       	brne	.-10     	; 0x386 <TWI_Get_Data_From_Transceiver+0x30>
      msg[ i ] = TWI_buf[ i ];
	  // transmit_UART('1');
	  // transmit_UART(msg[0]);
	  // transmit_UART('2');
    }
    TWI_statusReg.RxDataInBuf = FALSE;          // Slave Receive data has been read from buffer.
 390:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <TWI_statusReg>
 394:	8d 7f       	andi	r24, 0xFD	; 253
 396:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <TWI_statusReg>
  }
 
  return( TWI_statusReg.lastTransOK );                                   
 39a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <TWI_statusReg>
}
 39e:	81 70       	andi	r24, 0x01	; 1
 3a0:	08 95       	ret

000003a2 <__vector_19>:
This function is the Interrupt Service Routine (ISR), and called when the TWI interrupt is triggered;
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/
ISR(TWI_vect)
{
 3a2:	1f 92       	push	r1
 3a4:	0f 92       	push	r0
 3a6:	0f b6       	in	r0, 0x3f	; 63
 3a8:	0f 92       	push	r0
 3aa:	11 24       	eor	r1, r1
 3ac:	8f 93       	push	r24
 3ae:	9f 93       	push	r25
 3b0:	ef 93       	push	r30
 3b2:	ff 93       	push	r31
	//transmit_UART('*');
	//transmit_UART(TWDR);
  static unsigned char TWI_bufPtr;
  
  switch (TWSR)
 3b4:	81 b1       	in	r24, 0x01	; 1
 3b6:	80 39       	cpi	r24, 0x90	; 144
 3b8:	09 f4       	brne	.+2      	; 0x3bc <__vector_19+0x1a>
 3ba:	5e c0       	rjmp	.+188    	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 3bc:	90 f4       	brcc	.+36     	; 0x3e2 <__vector_19+0x40>
 3be:	80 37       	cpi	r24, 0x70	; 112
 3c0:	09 f4       	brne	.+2      	; 0x3c4 <__vector_19+0x22>
 3c2:	48 c0       	rjmp	.+144    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 3c4:	38 f4       	brcc	.+14     	; 0x3d4 <__vector_19+0x32>
 3c6:	88 23       	and	r24, r24
 3c8:	09 f4       	brne	.+2      	; 0x3cc <__vector_19+0x2a>
 3ca:	71 c0       	rjmp	.+226    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 3cc:	80 36       	cpi	r24, 0x60	; 96
 3ce:	09 f4       	brne	.+2      	; 0x3d2 <__vector_19+0x30>
 3d0:	46 c0       	rjmp	.+140    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 3d2:	73 c0       	rjmp	.+230    	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 3d4:	80 38       	cpi	r24, 0x80	; 128
 3d6:	09 f4       	brne	.+2      	; 0x3da <__vector_19+0x38>
 3d8:	4f c0       	rjmp	.+158    	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 3da:	88 38       	cpi	r24, 0x88	; 136
 3dc:	09 f4       	brne	.+2      	; 0x3e0 <__vector_19+0x3e>
 3de:	67 c0       	rjmp	.+206    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 3e0:	6c c0       	rjmp	.+216    	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 3e2:	88 3a       	cpi	r24, 0xA8	; 168
 3e4:	81 f0       	breq	.+32     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3e6:	38 f4       	brcc	.+14     	; 0x3f6 <__vector_19+0x54>
 3e8:	88 39       	cpi	r24, 0x98	; 152
 3ea:	09 f4       	brne	.+2      	; 0x3ee <__vector_19+0x4c>
 3ec:	60 c0       	rjmp	.+192    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 3ee:	80 3a       	cpi	r24, 0xA0	; 160
 3f0:	09 f4       	brne	.+2      	; 0x3f4 <__vector_19+0x52>
 3f2:	58 c0       	rjmp	.+176    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 3f4:	62 c0       	rjmp	.+196    	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 3f6:	80 3c       	cpi	r24, 0xC0	; 192
 3f8:	c9 f0       	breq	.+50     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 3fa:	88 3c       	cpi	r24, 0xC8	; 200
 3fc:	09 f4       	brne	.+2      	; 0x400 <__LOCK_REGION_LENGTH__>
 3fe:	57 c0       	rjmp	.+174    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 400:	88 3b       	cpi	r24, 0xB8	; 184
 402:	19 f0       	breq	.+6      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 404:	5a c0       	rjmp	.+180    	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
  {
    case TWI_STX_ADR_ACK:            // Own SLA+R has been received; ACK has been returned
//    case TWI_STX_ADR_ACK_M_ARB_LOST: // Arbitration lost in SLA+R/W as Master; own SLA+R has been received; ACK has been returned
      TWI_bufPtr   = 0;                                 // Set buffer pointer to first data location
 406:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
    case TWI_STX_DATA_ACK:           // Data byte in TWDR has been transmitted; ACK has been received
      TWDR = TWI_buf[TWI_bufPtr++];
 40a:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__data_end>
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	8e 0f       	add	r24, r30
 412:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	ea 59       	subi	r30, 0x9A	; 154
 41a:	ff 4f       	sbci	r31, 0xFF	; 255
 41c:	80 81       	ld	r24, Z
 41e:	83 b9       	out	0x03, r24	; 3
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 420:	85 ec       	ldi	r24, 0xC5	; 197
 422:	86 bf       	out	0x36, r24	; 54
             (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to send byte
             (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // 
             (0<<TWWC);                                 //
      TWI_busy = 1;
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <TWI_busy>
      break;
 42a:	4e c0       	rjmp	.+156    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
    case TWI_STX_DATA_NACK:          // Data byte in TWDR has been transmitted; NACK has been received. 
                                     // I.e. this could be the end of the transmission.
      if (TWI_bufPtr == TWI_msgSize) // Have we transceived all expected data?
 42c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__data_end>
 430:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <TWI_msgSize>
 434:	98 13       	cpse	r25, r24
 436:	06 c0       	rjmp	.+12     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
      {
        TWI_statusReg.lastTransOK = TRUE;               // Set status bits to completed successfully. 
 438:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <TWI_statusReg>
 43c:	81 60       	ori	r24, 0x01	; 1
 43e:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <TWI_statusReg>
 442:	03 c0       	rjmp	.+6      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
      } 
      else                          // Master has sent a NACK before all data where sent.
      {
        TWI_state = TWSR;                               // Store TWI State as errormessage.      
 444:	81 b1       	in	r24, 0x01	; 1
 446:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
      }        
                                                        
      TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
 44a:	85 ec       	ldi	r24, 0xC5	; 197
 44c:	86 bf       	out	0x36, r24	; 54
             (1<<TWIE)|(1<<TWINT)|                      // Keep interrupt enabled and clear the flag
             (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Answer on next address match
             (0<<TWWC);                                 //
      
      TWI_busy = 0;   // Transmit is finished, we are not busy anymore
 44e:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <TWI_busy>
      break;     
 452:	3a c0       	rjmp	.+116    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
    case TWI_SRX_GEN_ACK:            // General call address has been received; ACK has been returned
//    case TWI_SRX_GEN_ACK_M_ARB_LOST: // Arbitration lost in SLA+R/W as Master; General call address has been received; ACK has been returned
      TWI_statusReg.genAddressCall = TRUE;
 454:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <TWI_statusReg>
 458:	84 60       	ori	r24, 0x04	; 4
 45a:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <TWI_statusReg>
    case TWI_SRX_ADR_ACK:            // Own SLA+W has been received ACK has been returned
//    case TWI_SRX_ADR_ACK_M_ARB_LOST: // Arbitration lost in SLA+R/W as Master; own SLA+W has been received; ACK has been returned    
                                                        // Don't need to clear TWI_S_statusRegister.generalAddressCall due to that it is the default state.
      TWI_statusReg.RxDataInBuf = TRUE;      
 45e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <TWI_statusReg>
 462:	82 60       	ori	r24, 0x02	; 2
 464:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <TWI_statusReg>
      TWI_bufPtr   = 0;                                 // Set buffer pointer to first data location
 468:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
      
                                                        // Reset the TWI Interrupt to wait for a new event.
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 46c:	85 ec       	ldi	r24, 0xC5	; 197
 46e:	86 bf       	out	0x36, r24	; 54
             (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to send byte
             (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Expect ACK on this transmission
             (0<<TWWC);  
      TWI_busy = 1;
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <TWI_busy>
      
      break;
 476:	28 c0       	rjmp	.+80     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
    case TWI_SRX_ADR_DATA_ACK:       // Previously addressed with own SLA+W; data has been received; ACK has been returned
    case TWI_SRX_GEN_DATA_ACK:       // Previously addressed with general call; data has been received; ACK has been returned
      TWI_buf[TWI_bufPtr++]     = TWDR;
 478:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__data_end>
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	8e 0f       	add	r24, r30
 480:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 484:	83 b1       	in	r24, 0x03	; 3
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	ea 59       	subi	r30, 0x9A	; 154
 48a:	ff 4f       	sbci	r31, 0xFF	; 255
 48c:	80 83       	st	Z, r24
      TWI_statusReg.lastTransOK = TRUE;                 // Set flag transmission successful.       
 48e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <TWI_statusReg>
 492:	81 60       	ori	r24, 0x01	; 1
 494:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <TWI_statusReg>
                                                        // Reset the TWI Interrupt to wait for a new event.
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 498:	85 ec       	ldi	r24, 0xC5	; 197
 49a:	86 bf       	out	0x36, r24	; 54
             (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to send byte
             (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after next reception
             (0<<TWWC);                                 // 
      TWI_busy = 1;
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <TWI_busy>
      break;
 4a2:	12 c0       	rjmp	.+36     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
    case TWI_SRX_STOP_RESTART:       // A STOP condition or repeated START condition has been received while still addressed as Slave    
                                                        // Enter not addressed mode and listen to address match
      TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
 4a4:	85 ec       	ldi	r24, 0xC5	; 197
 4a6:	86 bf       	out	0x36, r24	; 54
             (1<<TWIE)|(1<<TWINT)|                      // Enable interrupt and clear the flag
             (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Wait for new address match
             (0<<TWWC);                                 //
      
      TWI_busy = 0;  // We are waiting for a new address match, so we are not busy
 4a8:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <TWI_busy>
      
      break;           
 4ac:	0d c0       	rjmp	.+26     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
    case TWI_SRX_ADR_DATA_NACK:      // Previously addressed with own SLA+W; data has been received; NOT ACK has been returned
    case TWI_SRX_GEN_DATA_NACK:      // Previously addressed with general call; data has been received; NOT ACK has been returned
    case TWI_STX_DATA_ACK_LAST_BYTE: // Last data byte in TWDR has been transmitted (TWEA = “0”); ACK has been received
      //    case TWI_NO_STATE              // No relevant state information available; TWINT = “0”
    case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
      TWI_state = TWSR;                 //Store TWI State as errormessage, operation also clears noErrors bit
 4ae:	81 b1       	in	r24, 0x01	; 1
 4b0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
      TWCR =   (1<<TWSTO)|(1<<TWINT);   //Recover from TWI_BUS_ERROR, this will release the SDA and SCL pins thus enabling other devices to use the bus
 4b4:	80 e9       	ldi	r24, 0x90	; 144
 4b6:	86 bf       	out	0x36, r24	; 54
      break;
 4b8:	07 c0       	rjmp	.+14     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
    default:     
      TWI_state = TWSR;                                 // Store TWI State as errormessage, operation also clears the Success bit.      
 4ba:	81 b1       	in	r24, 0x01	; 1
 4bc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
      TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
 4c0:	85 ec       	ldi	r24, 0xC5	; 197
 4c2:	86 bf       	out	0x36, r24	; 54
             (1<<TWIE)|(1<<TWINT)|                      // Keep interrupt enabled and clear the flag
             (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Acknowledge on any new requests.
             (0<<TWWC);                                 //
      
      TWI_busy = 0; // Unknown status, so we wait for a new address match that might be something we can handle
 4c4:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <TWI_busy>
  }
}
 4c8:	ff 91       	pop	r31
 4ca:	ef 91       	pop	r30
 4cc:	9f 91       	pop	r25
 4ce:	8f 91       	pop	r24
 4d0:	0f 90       	pop	r0
 4d2:	0f be       	out	0x3f, r0	; 63
 4d4:	0f 90       	pop	r0
 4d6:	1f 90       	pop	r1
 4d8:	18 95       	reti

000004da <init_UART>:


void init_UART(void )
{

  UCSRA = 0;
 4da:	1b b8       	out	0x0b, r1	; 11
  UCSRB = 0;
 4dc:	1a b8       	out	0x0a, r1	; 10
  UCSRC = 0;
 4de:	10 bc       	out	0x20, r1	; 32
  
  ///Double Baud Rate
  UCSRA |= _BV(U2X);
 4e0:	59 9a       	sbi	0x0b, 1	; 11
  ///Enable Reception
  UCSRB |= _BV(RXEN) | _BV(TXEN);
 4e2:	8a b1       	in	r24, 0x0a	; 10
 4e4:	88 61       	ori	r24, 0x18	; 24
 4e6:	8a b9       	out	0x0a, r24	; 10
  ///8-bit Data Byte, 2 Stop bits
  UCSRC |= _BV(USBS) | _BV(UCSZ1) | _BV(UCSZ0);
 4e8:	80 b5       	in	r24, 0x20	; 32
 4ea:	8e 60       	ori	r24, 0x0E	; 14
 4ec:	80 bd       	out	0x20, r24	; 32
  ///Set Baud Rate to 9600
  UBRRL = 103;
 4ee:	87 e6       	ldi	r24, 0x67	; 103
 4f0:	89 b9       	out	0x09, r24	; 9
  UBRRH = 0;
 4f2:	10 bc       	out	0x20, r1	; 32
 4f4:	08 95       	ret

000004f6 <transmit_UART>:
}

void transmit_UART(uint8_t data)
{
  //* Wait for empty transmit buffer 
  while ( !(UCSRA & (_BV(UDRE))) );
 4f6:	5d 9b       	sbis	0x0b, 5	; 11
 4f8:	fe cf       	rjmp	.-4      	; 0x4f6 <transmit_UART>
  //* Start transmission
  UDR = data;
 4fa:	8c b9       	out	0x0c, r24	; 12
 4fc:	08 95       	ret

000004fe <_exit>:
 4fe:	f8 94       	cli

00000500 <__stop_program>:
 500:	ff cf       	rjmp	.-2      	; 0x500 <__stop_program>
