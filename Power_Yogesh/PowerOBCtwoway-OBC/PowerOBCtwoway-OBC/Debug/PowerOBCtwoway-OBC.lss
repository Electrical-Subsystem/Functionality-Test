
PowerOBCtwoway-OBC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000340  000003d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000340  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800102  00800102  000003d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000408  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d64  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ad9  00000000  00000000  00001274  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000795  00000000  00000000  00001d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  000024e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f1  00000000  00000000  0000267c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002aa  00000000  00000000  00002c6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002f17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	96 c0       	rjmp	.+300    	; 0x12e <__ctors_end>
   2:	00 00       	nop
   4:	b1 c0       	rjmp	.+354    	; 0x168 <__bad_interrupt>
   6:	00 00       	nop
   8:	af c0       	rjmp	.+350    	; 0x168 <__bad_interrupt>
   a:	00 00       	nop
   c:	ad c0       	rjmp	.+346    	; 0x168 <__bad_interrupt>
   e:	00 00       	nop
  10:	ab c0       	rjmp	.+342    	; 0x168 <__bad_interrupt>
  12:	00 00       	nop
  14:	a9 c0       	rjmp	.+338    	; 0x168 <__bad_interrupt>
  16:	00 00       	nop
  18:	a7 c0       	rjmp	.+334    	; 0x168 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	a5 c0       	rjmp	.+330    	; 0x168 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a3 c0       	rjmp	.+326    	; 0x168 <__bad_interrupt>
  22:	00 00       	nop
  24:	a1 c0       	rjmp	.+322    	; 0x168 <__bad_interrupt>
  26:	00 00       	nop
  28:	9f c0       	rjmp	.+318    	; 0x168 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	9d c0       	rjmp	.+314    	; 0x168 <__bad_interrupt>
  2e:	00 00       	nop
  30:	9b c0       	rjmp	.+310    	; 0x168 <__bad_interrupt>
  32:	00 00       	nop
  34:	99 c0       	rjmp	.+306    	; 0x168 <__bad_interrupt>
  36:	00 00       	nop
  38:	97 c0       	rjmp	.+302    	; 0x168 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	95 c0       	rjmp	.+298    	; 0x168 <__bad_interrupt>
  3e:	00 00       	nop
  40:	93 c0       	rjmp	.+294    	; 0x168 <__bad_interrupt>
  42:	00 00       	nop
  44:	91 c0       	rjmp	.+290    	; 0x168 <__bad_interrupt>
  46:	00 00       	nop
  48:	8f c0       	rjmp	.+286    	; 0x168 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	8d c0       	rjmp	.+282    	; 0x168 <__bad_interrupt>
  4e:	00 00       	nop
  50:	8b c0       	rjmp	.+278    	; 0x168 <__bad_interrupt>
  52:	00 00       	nop
  54:	89 c0       	rjmp	.+274    	; 0x168 <__bad_interrupt>
  56:	00 00       	nop
  58:	87 c0       	rjmp	.+270    	; 0x168 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	85 c0       	rjmp	.+266    	; 0x168 <__bad_interrupt>
  5e:	00 00       	nop
  60:	83 c0       	rjmp	.+262    	; 0x168 <__bad_interrupt>
  62:	00 00       	nop
  64:	81 c0       	rjmp	.+258    	; 0x168 <__bad_interrupt>
  66:	00 00       	nop
  68:	7f c0       	rjmp	.+254    	; 0x168 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	7d c0       	rjmp	.+250    	; 0x168 <__bad_interrupt>
  6e:	00 00       	nop
  70:	7b c0       	rjmp	.+246    	; 0x168 <__bad_interrupt>
  72:	00 00       	nop
  74:	79 c0       	rjmp	.+242    	; 0x168 <__bad_interrupt>
  76:	00 00       	nop
  78:	77 c0       	rjmp	.+238    	; 0x168 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	75 c0       	rjmp	.+234    	; 0x168 <__bad_interrupt>
  7e:	00 00       	nop
  80:	73 c0       	rjmp	.+230    	; 0x168 <__bad_interrupt>
  82:	00 00       	nop
  84:	bd c0       	rjmp	.+378    	; 0x200 <__vector_33>
  86:	00 00       	nop
  88:	6f c0       	rjmp	.+222    	; 0x168 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	1c 01       	movw	r2, r24
  8e:	6e 01       	movw	r12, r28
  90:	6e 01       	movw	r12, r28
  92:	6e 01       	movw	r12, r28
  94:	6e 01       	movw	r12, r28
  96:	6e 01       	movw	r12, r28
  98:	6e 01       	movw	r12, r28
  9a:	6e 01       	movw	r12, r28
  9c:	1c 01       	movw	r2, r24
  9e:	6e 01       	movw	r12, r28
  a0:	6e 01       	movw	r12, r28
  a2:	6e 01       	movw	r12, r28
  a4:	6e 01       	movw	r12, r28
  a6:	6e 01       	movw	r12, r28
  a8:	6e 01       	movw	r12, r28
  aa:	6e 01       	movw	r12, r28
  ac:	1e 01       	movw	r2, r28
  ae:	6e 01       	movw	r12, r28
  b0:	6e 01       	movw	r12, r28
  b2:	6e 01       	movw	r12, r28
  b4:	6e 01       	movw	r12, r28
  b6:	6e 01       	movw	r12, r28
  b8:	6e 01       	movw	r12, r28
  ba:	6e 01       	movw	r12, r28
  bc:	6e 01       	movw	r12, r28
  be:	6e 01       	movw	r12, r28
  c0:	6e 01       	movw	r12, r28
  c2:	6e 01       	movw	r12, r28
  c4:	6e 01       	movw	r12, r28
  c6:	6e 01       	movw	r12, r28
  c8:	6e 01       	movw	r12, r28
  ca:	6e 01       	movw	r12, r28
  cc:	1e 01       	movw	r2, r28
  ce:	6e 01       	movw	r12, r28
  d0:	6e 01       	movw	r12, r28
  d2:	6e 01       	movw	r12, r28
  d4:	6e 01       	movw	r12, r28
  d6:	6e 01       	movw	r12, r28
  d8:	6e 01       	movw	r12, r28
  da:	6e 01       	movw	r12, r28
  dc:	6e 01       	movw	r12, r28
  de:	6e 01       	movw	r12, r28
  e0:	6e 01       	movw	r12, r28
  e2:	6e 01       	movw	r12, r28
  e4:	6e 01       	movw	r12, r28
  e6:	6e 01       	movw	r12, r28
  e8:	6e 01       	movw	r12, r28
  ea:	6e 01       	movw	r12, r28
  ec:	6a 01       	movw	r12, r20
  ee:	6e 01       	movw	r12, r28
  f0:	6e 01       	movw	r12, r28
  f2:	6e 01       	movw	r12, r28
  f4:	6e 01       	movw	r12, r28
  f6:	6e 01       	movw	r12, r28
  f8:	6e 01       	movw	r12, r28
  fa:	6e 01       	movw	r12, r28
  fc:	47 01       	movw	r8, r14
  fe:	6e 01       	movw	r12, r28
 100:	6e 01       	movw	r12, r28
 102:	6e 01       	movw	r12, r28
 104:	6e 01       	movw	r12, r28
 106:	6e 01       	movw	r12, r28
 108:	6e 01       	movw	r12, r28
 10a:	6e 01       	movw	r12, r28
 10c:	6e 01       	movw	r12, r28
 10e:	6e 01       	movw	r12, r28
 110:	6e 01       	movw	r12, r28
 112:	6e 01       	movw	r12, r28
 114:	6e 01       	movw	r12, r28
 116:	6e 01       	movw	r12, r28
 118:	6e 01       	movw	r12, r28
 11a:	6e 01       	movw	r12, r28
 11c:	3b 01       	movw	r6, r22
 11e:	6e 01       	movw	r12, r28
 120:	6e 01       	movw	r12, r28
 122:	6e 01       	movw	r12, r28
 124:	6e 01       	movw	r12, r28
 126:	6e 01       	movw	r12, r28
 128:	6e 01       	movw	r12, r28
 12a:	6e 01       	movw	r12, r28
 12c:	59 01       	movw	r10, r18

0000012e <__ctors_end>:
 12e:	11 24       	eor	r1, r1
 130:	1f be       	out	0x3f, r1	; 63
 132:	cf ef       	ldi	r28, 0xFF	; 255
 134:	d0 e1       	ldi	r29, 0x10	; 16
 136:	de bf       	out	0x3e, r29	; 62
 138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_copy_data>:
 13a:	11 e0       	ldi	r17, 0x01	; 1
 13c:	a0 e0       	ldi	r26, 0x00	; 0
 13e:	b1 e0       	ldi	r27, 0x01	; 1
 140:	e0 e4       	ldi	r30, 0x40	; 64
 142:	f3 e0       	ldi	r31, 0x03	; 3
 144:	00 e0       	ldi	r16, 0x00	; 0
 146:	0b bf       	out	0x3b, r16	; 59
 148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
 14a:	07 90       	elpm	r0, Z+
 14c:	0d 92       	st	X+, r0
 14e:	a2 30       	cpi	r26, 0x02	; 2
 150:	b1 07       	cpc	r27, r17
 152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
 154:	21 e0       	ldi	r18, 0x01	; 1
 156:	a2 e0       	ldi	r26, 0x02	; 2
 158:	b1 e0       	ldi	r27, 0x01	; 1
 15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
 15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
 15e:	a9 30       	cpi	r26, 0x09	; 9
 160:	b2 07       	cpc	r27, r18
 162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
 164:	02 d0       	rcall	.+4      	; 0x16a <main>
 166:	ea c0       	rjmp	.+468    	; 0x33c <_exit>

00000168 <__bad_interrupt>:
 168:	4b cf       	rjmp	.-362    	; 0x0 <__vectors>

0000016a <main>:
#include "TWI_Master.h"
#include "common.h"
#include "uart.h"

int main(void)
{
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	cd b7       	in	r28, 0x3d	; 61
 170:	de b7       	in	r29, 0x3e	; 62
 172:	27 97       	sbiw	r28, 0x07	; 7
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	f8 94       	cli
 178:	de bf       	out	0x3e, r29	; 62
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	cd bf       	out	0x3d, r28	; 61
	sei();
 17e:	78 94       	sei
	uint8_t HM_data[7];	
	unsigned char msg_buf[8];
	unsigned char SLA=0x20;
	
	HM_data[0]=SLA+0x00;
 180:	80 e2       	ldi	r24, 0x20	; 32
	msg_buf[0]=SLA+0x01;
	TWI_Master_Initialise();
	init_UART0();
 182:	89 83       	std	Y+1, r24	; 0x01
 184:	11 d0       	rcall	.+34     	; 0x1a8 <TWI_Master_Initialise>
    while (1) 
    {
		//-------------master transmitter----------------------//
		 
		//HM_data[1]=receive_UART0();
		HM_data[1]=0xF8;
 186:	c0 d0       	rcall	.+384    	; 0x308 <init_UART0>
 188:	18 ef       	ldi	r17, 0xF8	; 248
		
		TWI_Start_Transceiver_With_Data(HM_data,2);//HM_data[0]=address,HM_data[1]=data
 18a:	1a 83       	std	Y+2, r17	; 0x02
 18c:	62 e0       	ldi	r22, 0x02	; 2
 18e:	ce 01       	movw	r24, r28
 190:	01 96       	adiw	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 192:	14 d0       	rcall	.+40     	; 0x1bc <TWI_Start_Transceiver_With_Data>
 194:	2f ef       	ldi	r18, 0xFF	; 255
 196:	89 e6       	ldi	r24, 0x69	; 105
 198:	98 e1       	ldi	r25, 0x18	; 24
 19a:	21 50       	subi	r18, 0x01	; 1
 19c:	80 40       	sbci	r24, 0x00	; 0
 19e:	90 40       	sbci	r25, 0x00	; 0
 1a0:	e1 f7       	brne	.-8      	; 0x19a <main+0x30>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <main+0x3a>
 1a4:	00 00       	nop
 1a6:	f1 cf       	rjmp	.-30     	; 0x18a <main+0x20>

000001a8 <TWI_Master_Initialise>:
	//transmit_UART0(msg[1]); //prints data received
	//transmit_UART0('2');
  }
  return( TWI_statusReg.lastTransOK );    
                                
}
 1a8:	8c e0       	ldi	r24, 0x0C	; 12
 1aa:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 1b4:	84 e0       	ldi	r24, 0x04	; 4
 1b6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 1ba:	08 95       	ret

000001bc <TWI_Start_Transceiver_With_Data>:
 1bc:	dc 01       	movw	r26, r24
 1be:	e4 e7       	ldi	r30, 0x74	; 116
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	90 81       	ld	r25, Z
 1c4:	90 fd       	sbrc	r25, 0
 1c6:	fd cf       	rjmp	.-6      	; 0x1c2 <TWI_Start_Transceiver_With_Data+0x6>
 1c8:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <TWI_msgSize>
 1cc:	8c 91       	ld	r24, X
 1ce:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <TWI_buf>
 1d2:	80 fd       	sbrc	r24, 0
 1d4:	0c c0       	rjmp	.+24     	; 0x1ee <TWI_Start_Transceiver_With_Data+0x32>
 1d6:	62 30       	cpi	r22, 0x02	; 2
 1d8:	50 f0       	brcs	.+20     	; 0x1ee <TWI_Start_Transceiver_With_Data+0x32>
 1da:	fd 01       	movw	r30, r26
 1dc:	31 96       	adiw	r30, 0x01	; 1
 1de:	a6 e0       	ldi	r26, 0x06	; 6
 1e0:	b1 e0       	ldi	r27, 0x01	; 1
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	91 91       	ld	r25, Z+
 1e6:	9d 93       	st	X+, r25
 1e8:	8f 5f       	subi	r24, 0xFF	; 255
 1ea:	68 13       	cpse	r22, r24
 1ec:	fb cf       	rjmp	.-10     	; 0x1e4 <TWI_Start_Transceiver_With_Data+0x28>
 1ee:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <TWI_statusReg>
 1f2:	88 ef       	ldi	r24, 0xF8	; 248
 1f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 1f8:	85 ea       	ldi	r24, 0xA5	; 165
 1fa:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 1fe:	08 95       	ret

00000200 <__vector_33>:
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/
//#pragma vector=TWI_vect
ISR(TWI_vect)
{
 200:	1f 92       	push	r1
 202:	0f 92       	push	r0
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	0f 92       	push	r0
 208:	11 24       	eor	r1, r1
 20a:	0b b6       	in	r0, 0x3b	; 59
 20c:	0f 92       	push	r0
 20e:	2f 93       	push	r18
 210:	3f 93       	push	r19
 212:	8f 93       	push	r24
 214:	9f 93       	push	r25
 216:	af 93       	push	r26
 218:	bf 93       	push	r27
 21a:	ef 93       	push	r30
 21c:	ff 93       	push	r31
	//transmit_UART0('a');
	//transmit_UART0(TWDR);
	//_delay_ms(50);
  static unsigned char TWI_bufPtr;
 // transmit_UART0(TWSR);
  switch (TWSR)
 21e:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 222:	8e 2f       	mov	r24, r30
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	fc 01       	movw	r30, r24
 228:	38 97       	sbiw	r30, 0x08	; 8
 22a:	e1 35       	cpi	r30, 0x51	; 81
 22c:	f1 05       	cpc	r31, r1
 22e:	08 f0       	brcs	.+2      	; 0x232 <__vector_33+0x32>
 230:	55 c0       	rjmp	.+170    	; 0x2dc <__vector_33+0xdc>
 232:	ea 5b       	subi	r30, 0xBA	; 186
 234:	ff 4f       	sbci	r31, 0xFF	; 255
 236:	79 c0       	rjmp	.+242    	; 0x32a <__tablejump2__>
  {
    case TWI_START:             // START has been transmitted  
    case TWI_REP_START:         // Repeated START has been transmitted
      TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
 238:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
    case TWI_MTX_ADR_ACK:       // SLA+W has been tramsmitted and ACK received
    case TWI_MTX_DATA_ACK:      // Data byte has been tramsmitted and ACK received
      if (TWI_bufPtr < TWI_msgSize)
 23c:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
 240:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <TWI_msgSize>
 244:	e8 17       	cp	r30, r24
 246:	70 f4       	brcc	.+28     	; 0x264 <__vector_33+0x64>
      {
        TWDR = TWI_buf[TWI_bufPtr++];
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	8e 0f       	add	r24, r30
 24c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	eb 5f       	subi	r30, 0xFB	; 251
 254:	fe 4f       	sbci	r31, 0xFE	; 254
 256:	80 81       	ld	r24, Z
 258:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 25c:	85 e8       	ldi	r24, 0x85	; 133
 25e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 262:	43 c0       	rjmp	.+134    	; 0x2ea <__vector_33+0xea>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to send byte
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
               (0<<TWWC);                                 //  
      }else                    // Send STOP after last byte
      {
        TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
 264:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <TWI_statusReg>
 268:	81 60       	ori	r24, 0x01	; 1
 26a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <TWI_statusReg>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 26e:	84 e9       	ldi	r24, 0x94	; 148
 270:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 274:	3a c0       	rjmp	.+116    	; 0x2ea <__vector_33+0xea>
               (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
               (0<<TWWC);                                 //
      }
      break;
    case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK tramsmitted
      TWI_buf[TWI_bufPtr++] = TWDR;
 276:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	8e 0f       	add	r24, r30
 27e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 282:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	eb 5f       	subi	r30, 0xFB	; 251
 28a:	fe 4f       	sbci	r31, 0xFE	; 254
 28c:	80 83       	st	Z, r24
    case TWI_MRX_ADR_ACK:       // SLA+R has been tramsmitted and ACK received
      if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
 28e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <TWI_msgSize>
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	28 17       	cp	r18, r24
 29e:	39 07       	cpc	r19, r25
 2a0:	24 f4       	brge	.+8      	; 0x2aa <__vector_33+0xaa>
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 2a2:	85 ec       	ldi	r24, 0xC5	; 197
 2a4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 2a8:	20 c0       	rjmp	.+64     	; 0x2ea <__vector_33+0xea>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to read next byte
               (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
               (0<<TWWC);                                 //  
      } else                    // Send NACK after next reception
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 2aa:	85 e8       	ldi	r24, 0x85	; 133
 2ac:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 2b0:	1c c0       	rjmp	.+56     	; 0x2ea <__vector_33+0xea>
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
               (0<<TWWC);                                 //
      }
      break; 
    case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK tramsmitted
      TWI_buf[TWI_bufPtr] = TWDR;
 2b2:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 2b6:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	eb 5f       	subi	r30, 0xFB	; 251
 2be:	fe 4f       	sbci	r31, 0xFE	; 254
 2c0:	80 83       	st	Z, r24
      TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
 2c2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <TWI_statusReg>
 2c6:	81 60       	ori	r24, 0x01	; 1
 2c8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <TWI_statusReg>
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 2cc:	84 e9       	ldi	r24, 0x94	; 148
 2ce:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
             (0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
             (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
             (0<<TWWC);                                 //
      break;      
 2d2:	0b c0       	rjmp	.+22     	; 0x2ea <__vector_33+0xea>
    case TWI_ARB_LOST:          // Arbitration lost
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 2d4:	85 ea       	ldi	r24, 0xA5	; 165
 2d6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
             (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag
             (0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
             (0<<TWWC);                                 //
      break;
 2da:	07 c0       	rjmp	.+14     	; 0x2ea <__vector_33+0xea>
    case TWI_MRX_ADR_NACK:      // SLA+R has been tramsmitted and NACK received    
    case TWI_MTX_DATA_NACK:     // Data byte has been tramsmitted and NACK received
//    case TWI_NO_STATE              // No relevant state information available; TWINT = “0”
    case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
    default:     
      TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
 2dc:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 2e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
                                                        // Reset TWI Interface
      TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
 2e4:	84 e0       	ldi	r24, 0x04	; 4
 2e6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
             (0<<TWIE)|(0<<TWINT)|                      // Disable Interupt
             (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
             (0<<TWWC);                                 //
  }
}
 2ea:	ff 91       	pop	r31
 2ec:	ef 91       	pop	r30
 2ee:	bf 91       	pop	r27
 2f0:	af 91       	pop	r26
 2f2:	9f 91       	pop	r25
 2f4:	8f 91       	pop	r24
 2f6:	3f 91       	pop	r19
 2f8:	2f 91       	pop	r18
 2fa:	0f 90       	pop	r0
 2fc:	0b be       	out	0x3b, r0	; 59
 2fe:	0f 90       	pop	r0
 300:	0f be       	out	0x3f, r0	; 63
 302:	0f 90       	pop	r0
 304:	1f 90       	pop	r1
 306:	18 95       	reti

00000308 <init_UART0>:


void init_UART0(void )
{

  UCSR0A = 0;
 308:	1b b8       	out	0x0b, r1	; 11
  UCSR0B = 0;
 30a:	1a b8       	out	0x0a, r1	; 10
  UCSR0C = 0;
 30c:	e5 e9       	ldi	r30, 0x95	; 149
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	10 82       	st	Z, r1
  
  ///Double Baud Rate
  UCSR0A |= _BV(U2X0);
 312:	59 9a       	sbi	0x0b, 1	; 11
  ///Enable Reception
  UCSR0B |= _BV(RXEN0) | _BV(TXEN0);
 314:	8a b1       	in	r24, 0x0a	; 10
 316:	88 61       	ori	r24, 0x18	; 24
 318:	8a b9       	out	0x0a, r24	; 10
  ///8-bit Data Byte, 2 Stop bits
  UCSR0C |= _BV(USBS0) | _BV(UCSZ01) | _BV(UCSZ00);
 31a:	80 81       	ld	r24, Z
 31c:	8e 60       	ori	r24, 0x0E	; 14
 31e:	80 83       	st	Z, r24
  ///Set Baud Rate to 9600
  UBRR0L = 103;
 320:	87 e6       	ldi	r24, 0x67	; 103
 322:	89 b9       	out	0x09, r24	; 9
  UBRR0H = 0;
 324:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 328:	08 95       	ret

0000032a <__tablejump2__>:
 32a:	ee 0f       	add	r30, r30
 32c:	ff 1f       	adc	r31, r31
 32e:	00 24       	eor	r0, r0
 330:	00 1c       	adc	r0, r0
 332:	0b be       	out	0x3b, r0	; 59
 334:	07 90       	elpm	r0, Z+
 336:	f6 91       	elpm	r31, Z
 338:	e0 2d       	mov	r30, r0
 33a:	09 94       	ijmp

0000033c <_exit>:
 33c:	f8 94       	cli

0000033e <__stop_program>:
 33e:	ff cf       	rjmp	.-2      	; 0x33e <__stop_program>
